from fffw.graph.base import VIDEO, AUDIO
from fffw.graph import base

__all__ = [
    'SourceFile',
    'LavfiSource',
]


class BaseSource:
    """ Source signal base class."""

    def __init__(self, video_streams=1, audio_streams=1):
        self.video_streams = video_streams
        self.audio_streams = audio_streams


class SourceFile(BaseSource):
    """ Describes video/audio streams in an input file."""

    def __init__(self, filename, video_streams=1, audio_streams=1):
        super(SourceFile, self).__init__(video_streams=video_streams,
                                         audio_streams=audio_streams)
        self.filename = filename

    def __str__(self):
        return self.filename

    def get_args(self):
        return ['-i', str(self)]


class LavfiSource(BaseSource):
    """ Describes video or audio stream generated by lavfi library."""
    def __init__(self, name, kind, **opts):
        video_streams = opts.pop('video_streams', int(kind == VIDEO))
        audio_streams = opts.pop('audio_streams', int(kind == AUDIO))
        super(LavfiSource, self).__init__(video_streams, audio_streams)
        self.name = name
        self.opts = opts

    def __str__(self):
        if not self.opts:
            return self.name
        opts = ':'.join('%s=%s' % t for t in sorted(self.opts.items()))
        return '%s=%s' % (self.name, opts)

    def get_args(self):
        return ['-f', 'lavfi', '-i', str(self)]


class Input:
    """ Input streams grouper helpers."""
    def __init__(self, streams=(), kind=None):
        """
        :type streams: List[Source]
        """
        assert kind in (VIDEO, AUDIO)
        self.streams = streams or []
        self.kind = kind

    def connect_source(self, other):
        assert isinstance(other, base.Source)
        self.streams.append(other)

    def connect_dest(self, other):
        """ Connects first free input to a filter
        :param other: filter
        :type other: Node
        :return filter connected to an input
        :rtype: Node
        """

        input_map = getattr(other, 'map', None)
        for stream in self.streams:
            if stream.id is None:
                continue
            if input_map and input_map == stream.id:
                return stream.connect(other)
            if stream.edge is None:
                return stream.connect(other)
        raise IndexError("No free sources")

    def __or__(self, other):
        """
        :type other: Node
        :rtype: Node
        """
        if not isinstance(other, base.Node):
            return NotImplemented
        return self.connect_dest(other)

    def __lt__(self, other):
        if not isinstance(other, base.Source):
            return NotImplemented
        return self.connect_source(other)
